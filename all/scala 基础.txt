2.1、语言特性
    2.2、伴生类伴生对象
    2.3、apply 和 unapply
    2.4、trait 的特性
    2.5、隐式转换
    2.6、便函数 和 柯里化 区别
    2.7、协变和逆变



一、scala
    1、基本类型
        1、自动类型推断, 不分包装类型和基本类型, 统一都是类, int 会隐式转换 为 richint, string 转 stringops等
        2、没有 ++ 和 -- 操作 , 有 +=、 -=操作符
        3、函数不需要参数, 可以省略括号; apply 函数 类型() 的形式歧视就是 类名.apply()
        4、any 类型为最小类型
            unit
        5、while do; 没有for循环, 简易版的 for语句 for(i <- itter);
            1、跳出循环:
                boolean变量、return、或者 breaks 的break 函数
                 import scala.util.control.Breaks._
                 breakable {   break ;}
             2、多重 for循环
                for(i <- 1 to 9; j<- 1 to 9)
             3、if守卫
                for(i <- 1 to 100 if i % 2 == 0)
             4、for推导式:构造集合
                for(i <- 1 to 10) yield i

    2、函数式变成
        变长参数:
           def sum2(nums: int*): int= {}
           val s = sum(1 to 5: _*) 展开传入

    3、过程
        没有返回值, 或返回值为 unit 的函数

    4、面向对象
        a、var field 生成 getter 和setter 方法
        b、private var field 生成 私有的 getter 和 setter 方法
        c、val field 只生成 getter方法
        d、不希望生成 setter 和getter 方法, 则 将 field 声明为 private[this]
        e、自定义的 getter 和setter 方法
             def name = "dfadsf"
             def name_=(new Value: String) {print("dfdf")}
        f、private[this] var  声明对象私有, 其他对象不能访问
        g、构造函数
            辅助构造函数
                def this()
                必须第一行 调用主构造函数
            主构造函数
                和类名在一起
                如果主构造函数 传入的参数 什么修饰符都没有, 比如 name: String, 那么如果类内部的方法使用到了, 则会声明为 private[this] name; 否则没有该 field,就只能被constructor代码使用而已
        h、内部类
            和jiava不一样, 每个外部类的对象的 内部类都是不同的类
        i、object
            1、相当于class的实例, 通常放置 静态的 field 和静态 method
            2、object 不能定义接受参数的 constructor
            3、object 的 constructor 只会在其第一次被调用的时候执行一次
            4、object  用于单例 或者 存放 class 的静态成员

        j、伴生类 和伴生对象
            1、必须同名
            2、必须在一个 .scala文件
            3、可以互相访问私有成员

        h、object 集成抽象类
            1、object 可以继承抽象类, 覆盖抽象方法

        k、apply方法, unapply
            1、通常 在 伴生对象中 调用 apply 方法 创建伴生类的 实例, 让方法简介。 person('dfsd'), 调用了 伴生对象的 apply方法
            2、unapply 接收一个对象, 从对象中 取出 值, unapply方法主要用于模式匹配中

        l、main方法
            1、 在object 中使用  def main(args: Array[String]) {}
            2、object HelloWorld extend App {}     ; 即继承 app trait ,  app trait 继承自 DelayeInit Trait, 将constructor 代码放到 delayedInit 方法中执行
        m、object 实现枚举类型
            1、继承 Enumeration 类

        n、extends
            1、子类覆盖一个父类中的抽象方法,必须使用 override 关键字
            2、super 关键字 显式的指定要调用的父类的方法
            3、子类乐意覆盖父类的 val field
            4、强制类型转换: isInstanceOf 判断是否是实例,  null 不是任何 类的实例。  asInstaceOf[Strudent],
            5、getClass 和 classof  精确的获取类 classof[Person]
            6、使用模式匹配 判断 对象的 类
                p mathc {
                    case per: Person => print("dffd")
                    case _ => print("ddd")
                }
            7、只能在 子类的 主 constructor 中调用 父类的 constructor。

         o、匿名内部类
            def greeting(p: Person {def sayHello: String}) {......}

         p、抽象类
            1、有一个 抽象方法, 就是抽象类, 必须用 abstract 来声明
            2、子类中覆盖抽象类的抽象方法, 不需要使用 override关键字

         q、抽象field
            1、没有初始值的 field, 为 抽象field
            2、子类必须 覆盖 field, 不需要 override, 父类中有 getter 和setter 但是没有 该 field

    5、Trait
        a、triat 作为接口, 用 extens 关键字继承 trait, 没有 implement
        b、支持 多重继承tra, 用 with 关键字
        c、在 triat 中 定义 公用方法, 对类混入 triat
        d、为实例 混入 triat
        e、trait 调用链
            继承多个trait 后, 依次(从左到右)调用多个trait 中的同一个方法, 只要让多个trait的同一个方法中,在最后都执行super方法即可。
        f、trait 中覆盖 抽象方法
            如果方法中要用 super.抽象方法  则需要  用  abstract override 修饰该方法

        g、混合使用 trait 的抽象方法和具体方法
        h、 trait 构造机制
            trait 也有构造带吗, 不包含在 def 中的 代码就是 构造代码
            trait的类构造机制如下:
                1、父类的构造函数执行
                2、tra的构造代码执行, 多个trait 从左到右依次执行
                3、构造trait 时会先构造父trait, 如果多个 trait 继承同一个 trait, 则父trait 只会构造一次
                4、所有trait构造完毕之后, 子类的构造函数执行
        j、trait fiel 的初始胡
            1、提前定义   class Persion extends { var msg: String = 'init' } whit SyaHello {}
            2、lazy value

        h、trait 继承 class

    6、函数式编程
        a、函数直接赋值给变量
        b、匿名函数
        c、高阶函数
            1、接受 参数为函数的函数
        d、闭包
            1、函数在变量不处于其作用域时,还能够对其进行访问,即为闭包
                def func1(msg: string) = (name: String) => print(masg + name)
                val func2 = func1("dfd")
                var name1 = func2("name1")
                var name2 = func2("name2")
            2、原理
                scala 通过为每一个函数创建对象来实现闭包, 实际上对于 func1函数创建的函数, msg 和 name 是作为函数对象的变量存在的,因此每个函数才可以拥有不同的 name

        e、SAM转换
            1、single abstract method 简称 为 SAM, 用来 scala 转换成 java
            2、SAM实现  用隐式转换自动将 scala 函数, 转换成 java 对象

        f、currying 函数
            def sum(a: int) = (b: int) => a + b; sum(1)(1)
            def sum(a: int)(b: int) = a + b

        g、使用 return的匿名寒素, 不许给出返回类型

    7、scala 的 集合
        a、iterable ->
            Seq -> range、 arayBuffer、 List 等 trait
            Map
            set

        b、List
            1、list.head、 list.tail, 空 list 即为 Nil
            2、:: 用于将 head 和tail进行合并
            3、+:   :+

        c、LinkedList
            elem 引用头元素
            next  同 tail

        d、set

    8、模式匹配
        a、基本语法
            name = 'aa'
            data match {
                case "a" => print("ddd")
                case _ if name == 'aa' => {}
                case _ => ....
            }
        b、对类型进行模式匹配(异常处理)
            data match {
                case  e: Excpetion => print(e)
                case _: exception => ....
            }

        c、对array 和List 的元素进行模式匹配
            data match {
                case  array(a1) => ....
                case  array(Leo, a2, a3) => ....
                case  array(Leo, _*) => ....
                case  aaaa => ....
            }
        d、case class 与模式匹配
            主要是判断 传入参数 x 的类型 是否和 类 的 unapply 方法的 接收参数和返回的参数 是否一致, 如果一致, 接匹配上,并进行 结构
            x macth {
                case struent(name, id) => .....
            }
        e、option 与模式匹配
            x match {
             case Some(grem) => ....
             case None => ...
            }

    9、类型参数
        a、泛型类
            clasee Strudent[T])(val locald: T) {
                def getSchoole(ddd: T) = "s" + ddd + ddd
            }
        b、泛型函数
            def getcart[T](content: T) ={ }
        c、上边界 bounds
            繁星必须是某各类的 子类
            class Paity[T <: Person](p1: T, p2: T)
        d、下边界
            繁星必须是某各类的 父类
            class Paity[T >: Child](p1: T, p2: T)
        e、view bounds
            支持可以对类型进行隐式转换, 将指定的类型进行隐式转换后,再判断是否在边界制定的类型范围内
            clasee Party[T <% Person](p1: T, p2: T) {}

        f、context bounds
            上下文的隐式值
            class calculator[T: ordering](val num: T, val num2: T){
                def max(implicit order: Ordering[T]) = if (......)
            }
        g、manifest context bounds
            打包饭菜
            即类型的类型
            def packageFood[T: Manifest](food: T*) = {}
        h、协变和逆变
            父类有继承关系, 让子类也可以 互通
            calss Master
            class Professional extends Master

            //大师以及大师级别以下的名片都可以进入会场
            class Card[+T](var name: String)
            def enterMeet(cart: card[Master]){}
            如果 master 能进来, master 的子类也能进来

            如果 Professional 是 Master 的子类
            则 Card[Professional] 就变成了 card[Master] 的子类


            // 只要专家级别的 名片就可以进入会场, 如果大师级别的过来了, 当然可以了
            calss Card[-T](val name: String)
            def enterMeet(cart: card[Professional]){}
            如果 Professional 能进来, Professional 的父类也能进来

            如果 Master 是 Professional 的父类

            逆着变了
            则 card[Master] 就变成了 Card[Professional] 的子类

        i、existential type
            Array[T] forSome {type T}
            Array[_]  _ 代表某一种类型, 占位符

    10、隐式转换 和 饮食参数
        a、隐式转换
            1、在程序可见的 环境下定义 隐式转换函数
            2、 以 implicit 开头, 最好定义返回类型
        b、使用隐式转换加强现有类型
            1、原类转换为加强类

        c、隐式转换函数的作用域 和 导入
            1、默认使用两种 隐式转换:
                原类型 或者目标类型的伴生对象内的 隐式转换函数
                当前程序作用域内的可以唯一标识符表示的隐式转换函数
              如果隐式转换函数不在这两种情况下, 就必须手动导入 import.test._

        d、隐式转换的发生时机
            1、调用某个函数, 传入参数的类型, 与定义的参数类型不匹配
            2、使用某个类型的对象, 调用没有的方法
            3、使用某个类型的对象, 调用 有的方法, 但是方法参数类型不匹配
        e、隐式参数
            相当于给了参数 默认的值
            1、在函数或者方法中, 定义一个用 implicit 修饰的参数, 此时 scala会尝试找到 一个指定类型的 用 implicit 修饰的对象,即隐式值, 并注入参数
            2、scala 会在两个返回查找:
                当前作用域内可见的 var 或val 定义的 饮食参数
                隐式参数类型的伴生对象内的隐式值
        f、隐式类型

    11、偏函数 和 柯里化 区别
        偏函数
            1、如果你想定义一个函数，而让它只接受和处理其参数定义域范围内的子集，对于这个参数范围外的参数则抛出异常，这样的函数就是偏函数（
                顾名思异就是这个函数只处理传入来的部分参数）

            2、偏函数是个特质其的类型为 PartialFunction[A,B],其中接收一个类型为A的参数，返回一个类型为B的结果

            3、方法
                def isDefinedAt(x: A): Boolean //作用是判断传入来的参数是否在这个偏函数所处理的范围内

                示例1:
                val divide = new PartialFunction[Int,Int] {
                    def isDefinedAt(x: Int): Boolean = x != 0 //判断x是否等于0，当x = 0时抛出异常
                    def apply(x: Int): Int = 100/x
                }　
                示例2:
                val divide1 : PartialFunction[Int,Int] = {
                    case d : Int if d != 0 => 100/d //功能和上面的代码一样，这就是偏函数的强大之处，方便，简洁！！
                }
                示例3:
                val rs : PartialFunction[Int , String] = {
                    case 1 => "One"
                    case 2 => "Two"
                    case _ => "Other"
                }

                OrElse方法可以将多个偏函数组合起来使用，结合起来的效果类似case语句，但是每个偏函数里又可以再使用case
                val or = or1 orElse or2 orElse or_ //使用orElse将多个偏结合起来
                示例4:
                val orCase:(Int => String) = or1 orElse {case _ => "Other"}  // orElse还可以直接连接case使用

                val num = at1 andThen at2 // andThen 对函数的结果进行下一步的处理
        柯里化:
            返回的是一个函数